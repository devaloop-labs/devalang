/**
 * Shim TypeScript source that re-exports the runtime wasm-pack package when
 * available, or provides safe stubs when not present. Compiles to
 * out-tsc/pkg/devalang_core.js so compiled code can require("./pkg/devalang_core").
 */
let runtimePkg: any;
try {
  // prefer runtime pkg generated by wasm-pack when available
  // require at runtime so the package can be used even if wasm hasn't been built
  // (this keeps tests and consumers robust).
  // eslint-disable-next-line @typescript-eslint/no-var-requires
  runtimePkg = require("../../pkg/devalang_core");
}
catch (e) {
  runtimePkg = undefined;
}

export function parse(...args: any[]) {
  if (runtimePkg && typeof runtimePkg.parse === "function")
    return runtimePkg.parse(...args);
  throw new Error("WASM package not built: pkg/devalang_core not found");
}

export function debug_render(...args: any[]) {
  if (runtimePkg && typeof runtimePkg.debug_render === "function")
    return runtimePkg.debug_render(...args);
  throw new Error("WASM package not built: pkg/devalang_core not found");
}

export function render_audio(...args: any[]) {
  if (runtimePkg && typeof runtimePkg.render_audio === "function")
    return runtimePkg.render_audio(...args);
  return new Float32Array(0);
}

export function register_playhead_callback(cb?: any) {
  if (runtimePkg && typeof runtimePkg.register_playhead_callback === "function")
    return runtimePkg.register_playhead_callback(cb);
  return;
}

export function unregister_playhead_callback() {
  if (runtimePkg && typeof runtimePkg.unregister_playhead_callback === "function")
    return runtimePkg.unregister_playhead_callback();
  return;
}

const pkg = { parse, debug_render, render_audio, register_playhead_callback, unregister_playhead_callback };
export default pkg;
